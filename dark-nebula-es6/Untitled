class LeaderBoard
  attr_accessor :players, :board
  def initialize
    @players = {}
  end

  def add_score(player_id,score)
    if @players.keys.include?(player_id)
      @players[player_id].add_score(score)
    else
      @players[player_id] = Player.new(player_id)
      @players[player_id].add_score(score)
    end
  end

  def top(n_players)
    board = @players.sort_by {|key, value| value.average}.reverse
    result = []
    n_players.times do |n|
      result << board[n][0]
    end
    return result
  end

  def reset(player_id)
    @players[player_id].scores = [0]
    @players[player_id].average = 0
  end

end




class Player
  attr_accessor :average, :scores
  attr_reader :player_id

  def initialize(player_id)
    @scores = [0]
    @average = 0.0
    @player_id = player_id
  end

  def average
    total = @scores.inject(0.0) { |sum, score| sum + score }
    num_scores = scores.length-1
    @average = total/num_scores
    return @average
  end

  def add_score(score)
    @scores << score
    @average = average
  end

end

leader_board = LeaderBoard.new
leader_board.add_score(1, 50);
puts(leader_board.add_score(2, 80) == 80);
puts(leader_board.add_score(2, 70) == 75);
puts(leader_board.add_score(2, 60) == 70);
puts('Add score should return the average. test with 1 score')
puts(leader_board.add_score(3, 90) == 90)
puts('Add score should return the average. test with 2 scores')
puts(leader_board.add_score(3, 85) == 87.5)

puts('Top 3 should equal [3, 2, 1]:')
puts(leader_board.top(3) === [3, 2, 1])
puts('Top 2 should equal [3, 2]:')
puts(leader_board.top(2) === [3, 2])
leader_board.reset(3)
puts('After reset top 3 should equal [2, 1, 3]')
puts(leader_board.top(3) === [2, 1, 3])
